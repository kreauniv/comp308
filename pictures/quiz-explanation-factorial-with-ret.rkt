#lang racket

(define (factorial n)
    (if (equal? n 0)
        1
        (* n (factorial (- n 1)))))

(define (factorial/ret n return)
    (if (equal? n 0)
        (return 1)
        (factorial/ret (- n 1) (λ (val)
                                 (return (* n val))))))
(factorial/ret 4 return)
(factorial/ret 3 (λ (val)
                   (return (* 4 val))))
(factorial/ret 2 (λ (val)
                   ((λ (val)
                      (return (* 4 val)))
                    (* 3 val))))
(factorial/ret 1 (λ (val)
                   ((λ (val)
                      ((λ (val)
                         (return (* 4 val)))
                       (* 3 val)))
                    (* 2 val))))
(factorial/ret 0 (λ (val)
                   ((λ (val)
                      ((λ (val)
                         ((λ (val)
                            (return (* 4 val)))
                          (* 3 val)))
                       (* 2 val)))
                    (* 1 val))))
((λ (val)
   ((λ (val)
      ((λ (val)
         ((λ (val)
            (return (* 4 val)))
          (* 3 val)))
       (* 2 val)))
    (* 1 val)))
 1)

(define (factorial-acc n acc)
  (if (equal? n 0)
      acc
      (factorial-acc (- n 1) (* acc n))))

(define (factorial-acc/ret n acc return)
  (if (equal? n 0)
      (return acc)
      (factorial-acc/ret (- n 1) (* acc n) return)))

(factorial-acc/ret 4 1 return)
(factorial-acc/ret 3 4 return)
(factorial-acc/ret 2 12 return)
(factorial-acc/ret 1 24 return)
(factorial-acc/ret 0 24 return)
(return 24)